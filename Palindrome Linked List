class Solution {
    // Function to check whether the list is palindrome.
    boolean isPalindrome(Node head) {
        if (head == null || head.next == null) {
            return true; 
        }

        // Step 1: Find the middle of the linked list
        Node slow = head, fast = head;
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }

        // Step 2: Reverse the second half of the linked list
        Node prev = null;
        Node curr = slow;

        while (curr != null) {
            Node nextTemp = curr.next; 
            curr.next = prev;         
            prev = curr;              
            curr = nextTemp;          
        }

        // Step 3: Compare the first half and the reversed second half
        Node firstHalf = head;
        Node secondHalf = prev; 

        while (secondHalf != null) {
            if (firstHalf.data != secondHalf.data) {
                return false; 
            }
            firstHalf = firstHalf.next;
            secondHalf = secondHalf.next;
        }

        return true; 
    }
}
