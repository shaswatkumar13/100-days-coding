class Solution {
public:
    int getMinDiff(std::vector<int> &arr, int k) {
        int n = arr.size();
        if (n == 1) return 0;  // No height difference if there's only one element
        
        // Sort the array
        std::sort(arr.begin(), arr.end());

        // Initial difference without any adjustment
        int minDiff = arr[n-1] - arr[0];

        // Iterate through the sorted array and calculate the possible minimum difference
        for (int i = 1; i < n; ++i) {
            if (arr[i] < k) continue; // Skip if adjusting will make height negative

            // Adjust the minimum and maximum values after modification
            int minValue = std::min(arr[0] + k, arr[i] - k); // Adjust minimum height
            int maxValue = std::max(arr[n-1] - k, arr[i-1] + k); // Adjust maximum height

            // Update the minimum difference
            minDiff = std::min(minDiff, maxValue - minValue);
        }

        return minDiff;
    }
};
