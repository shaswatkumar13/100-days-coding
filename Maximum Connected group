class Solution {

    public int MaxConnection(int grid[][]) {
        int color=0, n=grid.length, ans=0;
        Integer vis[][] = new Integer[n][n];
        List<Integer> size_of_color = new ArrayList<>();
        
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                //unvisited 1
                if(vis[i][j]==null && grid[i][j]==1){
                    int size_of_component = floodfill(i,j,n,vis,grid,color);
                    size_of_color.add(size_of_component);
                    ans=Math.max(size_of_component,ans);
                    color++;
                }
            }
        }
        
        
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==0){
                    
                    Set<Integer> diff_color = new HashSet<>();
                    if(i-1>=0)  diff_color.add(vis[i-1][j]);
                    if(i+1<n)  diff_color.add(vis[i+1][j]);
                    if(j-1>=0)  diff_color.add(vis[i][j-1]);
                    if(j+1<n)  diff_color.add(vis[i][j+1]);
                    
                    
                    int size_of_component = 1;
                    for(Integer have_color:diff_color){
                        if(have_color==null)    continue;
                        
                        size_of_component+=size_of_color.get(have_color);
                    }
                    
                    ans=Math.max(size_of_component,ans);
                }
            }
        }
        
        return ans;
    }
    
    int floodfill(int i,int j,int n,Integer vis[][],int a[][],int color){
        if(i<0 || j<0 || i>=n || j>=n || vis[i][j]!=null || a[i][j]==0) return 0;
        
        vis[i][j]=color;
        
        int size_of_component=1;
        size_of_component += floodfill(i+1,j,n,vis,a,color);
        size_of_component += floodfill(i-1,j,n,vis,a,color);
        size_of_component += floodfill(i,j+1,n,vis,a,color);
        size_of_component += floodfill(i,j-1,n,vis,a,color);
        
        return size_of_component;
    }
}
